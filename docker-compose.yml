# version: "3.8"

# services:
#   # Redis service for Celery broker
#   redis:
#     image: redis:alpine
#     ports:
#       - "6380:6379" # Corrected port mapping
#     networks:
#       - backend

#   # PostgreSQL database service
#   db:
#     image: postgres:13
#     environment:
#       - POSTGRES_DB=${DB_NAME}
#       - POSTGRES_USER=${DB_USER}
#       - POSTGRES_PASSWORD=${DB_PASSWORD}
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     networks:
#       - backend

#   # Django application service
#   web:
#     build: .
#     command: bash -c "sleep 5 && python manage.py collectstatic --noinput && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
#     volumes:
#       - .:/app
#       - static_volume:/app/staticfiles
#       - media_volume:/app/media
#     ports:
#       - "8000:8000"
#     env_file:
#       - .env
#     depends_on:
#       - db
#       - redis
#     networks:
#       - backend

#   # Celery worker service for background tasks
#   celery_worker:
#     build: .
#     command: celery -A flightops worker --loglevel=info
#     volumes:
#       - .:/app
#     depends_on:
#       - db
#       - redis
#     env_file:
#       - .env

#     environment:
#       - DJANGO_SETTINGS_MODULE=flightops.settings

#     networks:
#       - backend

#   # Celery beat service for periodic tasks
#   celery_beat:
#     build: .
#     command: celery -A flightops beat --loglevel=info
#     volumes:
#       - .:/app
#     depends_on:
#       - db
#       - redis
#     env_file:
#       - .env

#     environment:
#       - DJANGO_SETTINGS_MODULE=flightops.settings
#     networks:
#       - backend

# volumes:
#   postgres_data:
#   static_volume:
#   media_volume:

# networks:
#   backend:
#     driver: bridge

version: "3.8"

services:
  # Redis service for Celery broker
  redis:
    image: redis:alpine
    ports:
      - "6380:6379"
    networks:
      - backend

  # PostgreSQL database service
  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  # Django application service
  web:
    build: .
    command: bash -c "sleep 5 && python manage.py collectstatic --noinput && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - backend

  # Nginx reverse proxy service
  nginx:
    image: nginx:latest
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/wbhub_nginx.conf # Mount custom Nginx config
      - static_volume:/app/staticfiles # Serve static files from this volume
      - media_volume:/app/media # Serve media files from this volume
      - .:/app
    depends_on:
      - web
    networks:
      - backend

  # Celery worker service for background tasks
  celery_worker:
    build: .
    command: celery -A flightops worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=flightops.settings
    networks:
      - backend

  # Celery beat service for periodic tasks
  celery_beat:
    build: .
    command: celery -A flightops beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=flightops.settings
    networks:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  backend:
    driver: bridge
