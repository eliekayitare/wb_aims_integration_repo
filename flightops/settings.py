"""
Django settings for flightops project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
import os
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# settings.py

import os
import logging

# Define your log file path
LOG_FILE_PATH = os.path.join(BASE_DIR, 'flight_operations.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} - {name} - {levelname} - {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE_PATH,
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['file', 'console'],
            'level': 'INFO',
        },
        'django': {  # Django-specific logger
            'handlers': ['file', 'console'],
            'level': 'ERROR',  # Only log errors from Django system
            'propagate': False,
        },
        'your_app_name': {  # Your specific app's logger
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['10.0.0.120', 'localhost', '127.0.0.1','wbhub.rwandair.com']

# Allowed Hosts
# ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())

AD_AUTH_URL = config('AD_AUTH_URL')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentications',
    'aimsintegration',
    'channels',
    'corsheaders',
    'rest_framework',
    'whitenoise',  # For serving static files
    'django_celery_beat',       # For periodic tasks
]


REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'aimsintegration.middleware.ErrorHandlingMiddleware',
]

ROOT_URLCONF = 'flightops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Global templates folder
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'flightops.wsgi.application'

CSRF_TRUSTED_ORIGINS = [
    'https://wbhub.rwandair.com',
    'https://10.0.0.120'
]



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',  # Your primary DB (Postgres, for example)
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    },
    'mssql': {
        'ENGINE': 'mssql',
        'NAME': config('MSSQL_DB_NAME'),
        'USER': config('MSSQL_DB_USER'),
        'PASSWORD': config('MSSQL_DB_PASSWORD'),
        'HOST': config('MSSQL_DB_HOST'),
        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',  # Make sure you have this ODBC driver installed
        },
    },
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



AUTH_USER_MODEL = 'authentications.User'
# Email settings

EMAIL_BACKEND = 'authentications.email_backend.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT', cast=int)

EMAIL_SSL_CERTFILE = None
EMAIL_SSL_KEYFILE = None

FIRST_EMAIL_RECEIVER = config('FIRST_EMAIL_RECEIVER')
SECOND_EMAIL_RECEIVER = config('SECOND_EMAIL_RECEIVER')
THIRD_EMAIL_RECEIVER = config('THIRD_EMAIL_RECEIVER')
FOURTH_EMAIL_RECEIVER = config('FOURTH_EMAIL_RECEIVER')

EXCHANGE_EMAIL_USER = config('EXCHANGE_EMAIL_USER')
EXCHANGE_EMAIL_PASSWORD = config('EXCHANGE_EMAIL_PASSWORD')
EXCHANGE_EMAIL_SERVER = config('EXCHANGE_EMAIL_SERVER')


AIMS_SERVER_ADDRESS = config('AIMS_SERVER_ADDRESS')
AIMS_SERVER_USER= config('AIMS_SERVER_USER')
AIMS_SERVER_PASSWORD= config('AIMS_SERVER_PASSWORD')
AIMS_SERVER_DESTINATION_PATH= config('AIMS_SERVER_DESTINATION_PATH')
AIMS_PORT= config('AIMS_PORT')


EXCHANGE_SENDER_ID = 'RWANDAIR'
# Local folder where EDIFACT files will be written
QATAR_APIS_OUTPUT_PATH = BASE_DIR / 'qatar_apis'
# Ensure the output directory exists
os.makedirs(QATAR_APIS_OUTPUT_PATH, exist_ok=True)
# DREAMMILES

DREAM_HOST_USER = config('DREAM_HOST_USER')
DREAM_HOST_PASSWORD = config('DREAM_HOST_PASSWORD')

# Celery Configuration
from kombu import Queue, Exchange
from celery.schedules import crontab
from datetime import timedelta
from celery.schedules import crontab
from datetime import timedelta

CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'

# Celery Beat Schedule for periodic tasks
CELERY_BEAT_SCHEDULE = {
    # Airport Data - Runs every 72 hours after initial run
    'fetch-airport-data-every-72-hours': {
        'task': 'aimsintegration.tasks.fetch_airport_data',
        'schedule': crontab(minute='*/75'),  # Every 1 hour 15 minutes
    },
    # Flight Schedules - Runs every 10 minutes after initial run
    'fetch-flight-schedules-every-10-minutes': {
        'task': 'aimsintegration.tasks.fetch_flight_schedules',
        'schedule': crontab(minute='*/10'),  # Every 10 minutes
        
    },
    # ACARS Messages - Runs every 3 minutes
    'fetch-acars-messages-every-3-minutes': {
        'task': 'aimsintegration.tasks.fetch_acars_messages',
        'schedule': crontab(minute='*/3'),  # Every 3 minutes
    },

    # CARGO Project - Runs every 1 hour 20 minutes
    'fetch-cargo-data-every-1-hour': {
        'task': 'aimsintegration.tasks.cargo_fetch_flight_schedules',
        'schedule': crontab(minute='*/85'),  # Every 1 hour 25 minutes
    },

    # CPAT Project -Runs every 1 hour 40 minutes
    'fetch-cpat-data-every-hour': {
        'task': 'aimsintegration.tasks.fetch_and_store_completion_records',
        'schedule': crontab(minute='*/100'),  # Every 1 hour 40 minutes
    },

    # Send Notification for expired records - Runs every 1 hour
    'notify-cpat-expiry-daily': {
        'task': 'aimsintegration.tasks.send_cpat_expiry_notifications',
        'schedule': crontab(hour=9, minute=0),  # runs daily at 09:00 Kigali time
    },

    #FDM Project - Runs every 1 hour

     # Flight Schedules - Runs every 10 minutes after initial run
    'fetch-fdm_flight-schedules-every-15-minutes': {
        'task': 'aimsintegration.tasks.fetch_fdm_flight_schedules',
        'schedule': crontab(minute='*/15'),  # Every 15 minutes
        'options': {'run_immediately': False}
    },

    #Fetch Crew Data - Runs every 15 minutes
    'fetch-crew-data-every-15-minutes': {
        'task': 'aimsintegration.tasks.fetch_fdm_crew_data',
        'schedule': crontab(minute='*/16'),  # Every 16 minutes
        'options': {'run_immediately': False}
    },

    # UPload FDM Data - runs every 1 hour
    'upload-fdm-data-every-hour': {
        'task': 'aimsintegration.tasks.hourly_upload_csv_to_fdm',
        'schedule': crontab(minute='*/60'),  # Every 1 hour
        'options': {'run_immediately': False}
        
    },

    # Feed Tableau - Runs every 5 minutes
    'feed-tableau-every-5-minutes': {
        'task': 'aimsintegration.tasks.fetch_tableau',
        'schedule': crontab(minute='*/5'),  # Every 5 minutes
    },

    # Delete old emails - Runs every 1 hour

    'delete-old-emails-every-hour': {
        'task': 'aimsintegration.tasks.delete_old_emails',
        'schedule': crontab(minute='*/2'),  # Every hour
    },

    # # Only keep the campaign checker in CELERY_BEAT (the processing will self-schedule)
    # 'check-dreammiles-campaign-hourly': {
    #     'task': 'aimsintegration.tasks.check_and_start_dreammiles_campaign',
    #     'schedule': crontab(minute='0'),  # Every hour at XX:00
    # },
    
    # Delete old flight  data 

    # 'delete-old-emails-every-hour': {
    #     'task': 'aimsintegration.tasks.delete_flights_no_actual_timings',
    #     'schedule': crontab(minute='*/2'),  # Every hour
    # },


    # 'delete_flights_no_actual_timings': {
    #     'task': 'aimsintegration.tasks.delete_flights_no_actual_timings',
    #     'schedule': crontab(minute='*/2'),  # Every hour
    # },

     # Job 97: fetch flight-crew assignments every 10 minutes
    'fetch-job97-every-10-minutes': {
        'task': 'aimsintegration.tasks.fetch_job97',
        'schedule': crontab(minute='*/30'),
    },
    # Job 1008: fetch static crew details every 15 minutes
    'fetch-job1008-every-15-minutes': {
        'task': 'aimsintegration.tasks.fetch_job1008',
        'schedule': crontab(minute='*/10'),
    },

}

CORS_ALLOWED_ORIGINS = [
"http://localhost:3000",
]





# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]


# Directory where static files are stored for the project
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# In your settings.py, add:
DATA_DIR = os.path.join(BASE_DIR, 'data')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



ASGI_APPLICATION = 'flightops.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('wbhub.rwandair.com', 6379)],
        },
    },
}

LMS_BASE_URL = config('LMS_BASE_URL')
LMS_KEY = config('LMS_KEY')
API_TOKEN = config('API_TOKEN')
DAYS = config('DAYS')  # Optional: Define default and typecast
CPAT_AIMS_PATH = config('CPAT_AIMS_PATH')

# daphne -p 8000 flightops.asgi:application



#FDM configurations

FDM_HOST = config('FDM_HOST')
FDM_USERNAME = config('FDM_USERNAME')
FDM_PASSWORD = config('FDM_PASSWORD')
FDM_PORT = config('FDM_PORT')
FDM_DESTINATION_DIR = config('FDM_DESTINATION_DIR')

AD_AUTH_KEY = config('AD_AUTH_KEY')