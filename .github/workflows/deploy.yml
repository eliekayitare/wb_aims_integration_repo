name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          python manage.py test

      - name: Deploy to Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MSSQL_DB_USER: ${{ secrets.MSSQL_DB_USER }}
          MSSQL_DB_PASSWORD: ${{ secrets.MSSQL_DB_PASSWORD }}
          MSSQL_DB_NAME: ${{ secrets.MSSQL_DB_NAME }}
          MSSQL_DB_HOST: ${{ secrets.MSSQL_DB_HOST }}
          EXCHANGE_EMAIL_USER: ${{ secrets.EXCHANGE_EMAIL_USER }}
          EXCHANGE_EMAIL_PASSWORD: ${{ secrets.EXCHANGE_EMAIL_PASSWORD }}
          EXCHANGE_EMAIL_SERVER: ${{ secrets.EXCHANGE_EMAIL_SERVER }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          AD_AUTH_URL: ${{ secrets.AD_AUTH_URL }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > id_rsa
          chmod 600 id_rsa
          ssh -o StrictHostKeyChecking=no -i id_rsa ${SERVER_USER}@${SERVER_HOST} << 'EOF'
            echo "Navigating to project directory"
            mkdir -p /home/administrator/wb_aims_integrations
            cd /home/administrator/wb_aims_integrations || exit 1

            # Write the .env file to the server with the necessary environment variables
            echo "Creating and updating .env file on server"
            cat > .env <<EOT
            SECRET_KEY=${SECRET_KEY}
            MSSQL_DB_USER=${MSSQL_DB_USER}
            MSSQL_DB_PASSWORD=${MSSQL_DB_PASSWORD}
            MSSQL_DB_NAME=${MSSQL_DB_NAME}
            MSSQL_DB_HOST=${MSSQL_DB_HOST}
            EXCHANGE_EMAIL_USER=${EXCHANGE_EMAIL_USER}
            EXCHANGE_EMAIL_PASSWORD=${EXCHANGE_EMAIL_PASSWORD}
            EXCHANGE_EMAIL_SERVER=${EXCHANGE_EMAIL_SERVER}
            EMAIL_HOST=${EMAIL_HOST}
            EMAIL_PORT=${EMAIL_PORT}
            EMAIL_HOST_USER=${EMAIL_HOST_USER}
            EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
            DB_USER=${DB_USER}
            DB_PASSWORD=${DB_PASSWORD}
            DB_NAME=${DB_NAME}
            DB_HOST=${DB_HOST}
            DB_PORT=${DB_PORT}
            AD_AUTH_URL=${AD_AUTH_URL}
            EOT

            echo "Pulling latest changes"
            git pull origin main || exit 1

            echo "Bringing down existing Docker containers"
            docker-compose down || exit 1

            echo "Rebuilding and starting Docker containers"
            docker-compose up -d --build || exit 1

            echo "Running database migrations"
            docker-compose exec web python manage.py migrate || exit 1

            echo "Collecting static files"
            docker-compose exec web python manage.py collectstatic --no-input || exit 1
          EOF
